---
description: This rules governs the agent in cursor and the actions that the agent should have when operating on this code base.  globs. 
globs: 
---
USAGE: {list of tasks delimited by comma} || activate @agent.mdc

ex: Add more loading states for specific sections; Enhance the error messages; Adjust the transition timings; Add more interactive feedback || activate @agent

---
# Agentic AI Manifest for Iterative Codebase Orchestration

## Overview
This manifest defines the guiding principles for employing agentic AI to iteratively enhance and orchestrate the entire codebase. The approach is centered on four distinct lenses for codebase analysis: Software Best Practices, Software Architecture Principles, Innovations using Optimal Math, and Reuse of Powerful Libraries. Each lens ensures that our code remains clean, well-tested, innovative, and leverages the best available resources.

## Four Lenses for Codebase Analysis

### 1. Software Best Practices (Clean Code)
- **Readability & Maintainability:**  
  Ensure all code adheres to clean code principlesâ€”self-explanatory, concise, and well-organized.
- **Refactoring & Consistency:**  
  Continuously refactor the codebase to eliminate complexity, improve naming conventions, and enforce consistent styling across all files.
- **Documentation:**  
  Maintain clear documentation and inline comments to facilitate future modifications and onboarding.

### 2. Software Architecture Principles (Code Tests)
- **Test-Driven Development:**  
  Integrate unit, integration, and end-to-end tests as core components of the development process.
- **Modular Design:**  
  Structure the code into well-defined modules that promote separation of concerns and ease of testing.
- **Continuous Integration:**  
  Employ automated testing within CI pipelines to catch issues early and ensure robustness of the overall architecture.

### 3. Innovations (Optimal Use and Optimal Math)
- **Advanced Algorithms:**  
  Leverage optimal mathematical approaches and efficient algorithms to solve complex problems within the codebase.
- **Quantitative Analysis:**  
  Utilize performance metrics and mathematical modeling to analyze and optimize code efficiency.
- **Cutting-Edge Solutions:**  
  Continuously explore and integrate innovative technologies and techniques that drive the project forward, ensuring the best possible use of resources.

### 4. Reuse of Powerful Libraries
- **Leveraging Established Tools:**  
  Adopt and integrate mature, well-supported libraries to solve common problems quickly and reliably.
- **Avoid Reinventing the Wheel:**  
  Evaluate available libraries and frameworks for functionality, performance, and maintainability before building custom solutions.
- **Continuous Evaluation:**  
  Periodically assess and update libraries to ensure alignment with the latest improvements, security patches, and community best practices.

## Guidelines for Iterative Codebase Orchestration

1. **Initial Assessment:**
   - Conduct a comprehensive review of the entire codebase using the four analysis lenses.
   - Identify areas that require refactoring, testing, innovative improvements, or integration of powerful libraries.

2. **Strategic Planning:**
   - Draft detailed pseudocode and a strategic plan for each iteration, referencing specific files and sections.
   - Validate the plan against clean code standards, architectural integrity, performance goals, and library integration best practices.

3. **Implementation & Iteration:**
   - Execute the planned changes ensuring that all modifications are fully functional, secure, and optimized.
   - Apply test-driven development practices to verify the reliability of changes.
   - Iterate continuously based on feedback and performance metrics, refining the codebase through each cycle.

4. **Documentation & Feedback:**
   - Document every change clearly with inline comments and descriptive commit messages.
   - Incorporate feedback from automated tests, code reviews, and performance analytics to drive future iterations.
